// Generated by CoffeeScript 1.3.1
(function() {
  var addMessage, assignUserColor, colors, fetchChat, fetchOrCreateUserColor, fetchOrCreateUserid, logError, mongoConnect, render, usedColors, _;

  fetchChat = function(db, callback) {
    return db.collection('chat', function(err, chat) {
      if (err) {
        logError(err);
        return callback(err, null);
      } else {
        return chat.find({}, {
          limit: 50
        }).toArray(function(err, messages) {
          if (err) {
            return callback(err);
          } else {
            return callback(err, messages);
          }
        });
      }
    });
  };

  addMessage = function(db, color, userid, text, callback) {
    return db.collection('chat', function(err, chat) {
      if (err) {
        logError(err);
        return callback(err, null);
      } else {
        return chat.insert({
          color: color,
          userid: userid,
          text: text
        }, callback);
      }
    });
  };

  _ = require('underscore');

  colors = ['red', 'blue', 'yellow', 'black'];

  usedColors = {};

  _.each(colors, function(e) {
    console.log(e);
    return usedColors[e] = null;
  });

  assignUserColor = function() {
    var color;
    color = _.find(colors, function(color) {
      return usedColors[color] === null;
    });
    usedColors[color] = true;
    return color;
  };

  fetchOrCreateUserColor = function(db, userid, callback) {
    return db.collection('user_colors', function(err, userColors) {
      if (err) {
        logError(err);
        return callback(err, null);
      } else {
        return userColors.findOne({
          userid: userid
        }, function(err, userColor) {
          if (err) {
            logError(err);
            return callback(err, null);
          } else {
            console.log(userColor);
            if (!userColor) {
              userColor = assignUserColor();
              userColors.insert({
                userid: userid,
                color: userColor
              }, function(err, docs) {});
              if (err) {
                return logError(err);
              } else {
                return callback(null, userColor.color);
              }
            } else {
              return callback(null, userColor.color);
            }
          }
        });
      }
    });
  };

  logError = function(err) {
    return console.log("Error: " + (JSON.stringify(err, null, 2)));
  };

  mongoConnect = function(callback) {
    var Connection, Db, Server, db, host, port;
    Db = require('mongodb').Db;
    Connection = require('mongodb').Connection;
    Server = require('mongodb').Server;
    host = process.env['MONGO_NODE_DRIVER_HOST'] ? process.env['MONGO_NODE_DRIVER_HOST'] : 'localhost';
    port = process.env['MONGO_NODE_DRIVER_PORT'] ? process.env['MONGO_NODE_DRIVER_PORT'] : Connection.DEFAULT_PORT;
    console.log(host);
    console.log(port);
    db = new Db('canned', new Server(host, port, {}), {});
    return db.open(callback);
  };

  fetchOrCreateUserid = function(req, res) {
    var userid;
    userid = req.cookies['userid'];
    if (!userid) {
      userid = Date.now() * 100 + Math.floor(Math.random() * 100);
      res.cookie('userid', userid, {
        maxAge: 1000 * 60 * 60 * 24 * 120
      });
    }
    return userid;
  };

  render = function(res, userid, userColor) {
    return res.render('index', {
      title: 'Canned',
      color: userColor,
      userid: userid
    });
  };

  exports.routes = {
    index: function(req, res) {
      var userid;
      userid = fetchOrCreateUserid(req, res);
      return mongoConnect(function(err, db) {
        if (err) {
          return logError(err);
        } else {
          return fetchOrCreateUserColor(db, userid, function(err, userColor) {
            if (err) {
              return logError(err);
            } else {
              return render(res, userid, userColor);
            }
          });
        }
      });
    }
  };

  exports.sockets = {
    connected: function(socket) {
      console.log("connected");
      socket.on('login', function(userid) {
        console.log("Login: " + userid);
        return mongoConnect(function(err, db) {
          console.log("db connected");
          return fetchOrCreateUserColor(db, userid, function(err, color) {
            if (err) {
              return logError(err);
            } else {
              console.log("color " + color);
              return fetchChat(db, function(err, chat) {
                if (err) {
                  return logError(err);
                } else {
                  console.log(chat);
                  socket.emit("welcome", {
                    userid: userid,
                    color: color,
                    chat: chat
                  });
                  return socket.broadcast.emit('joined', {
                    userid: userid,
                    color: color
                  });
                }
              });
            }
          });
        });
      });
      socket.on('chat', function(data) {
        console.log(data);
        socket.broadcast.emit('chat', data);
        return mongoConnect(function(err, db) {
          console.log("db connected");
          return addMessage(db, data.color, data.userid, data.text, function(err, docs) {
            return console.log("wrote " + docs);
          });
        });
      });
      return socket.on('typed', function(data) {
        console.log(data);
        return socket.broadcast.emit('typed', data);
      });
    }
  };

}).call(this);
